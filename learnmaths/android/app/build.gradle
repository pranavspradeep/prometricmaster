plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

android {
    namespace = "com.learnmaths.app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.learnmaths.app"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            def keyProperties = new Properties()
            def keyPropertiesFile = file('../key.properties')
            if (keyPropertiesFile.exists()) {
                println "[DEBUG] Loading key.properties from: ${keyPropertiesFile.absolutePath}"
                keyProperties.load(new FileInputStream(keyPropertiesFile))
                println "[DEBUG] storeFile: ${keyProperties['storeFile']}"
                println "[DEBUG] storePassword: ${keyProperties['storePassword']}"
                println "[DEBUG] keyAlias: ${keyProperties['keyAlias']}"
                println "[DEBUG] keyPassword: ${keyProperties['keyPassword']}"
                storeFile file(keyProperties['storeFile'])
                storePassword keyProperties['storePassword']
                keyAlias keyProperties['keyAlias']
                keyPassword keyProperties['keyPassword']
            } else {
                println "[ERROR] key.properties file not found!"
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}
